Rough Design for Mersive Test Project
=====================================

This will be designed to run a HTTP server.

The service will:
 - Read configuration from default values, environment variables and
   command-line options.
 - Open a TCP socket listening on the configured IP address and port.
 - Run an event loop handling:
   - Shutdown signals which will do a clean shutdown of the service.
     - Existing connections will complete.
   - No new connections will be accepted.
   - Non-blocking socket IO using poll.
     - New incoming connections on the listen socket.
   - New input ready to read into buffers.
   - Ready for output to write out of buffers.
   - Update timeout on any socket events.
   - Socket errors or involuntary closes.
   - Check timeout on each socket.
     - Close if expired.
  - Continue checking the list as long as items are expired.

Tradeoffs
=========

This design spent too much time implementing nice to have things such as
flexible configuration, async networking and an attempt at minimal string
copies.

The minimal string copies using string_view everywhere are nice and fast.
But they would probably cause maintenance problems.

On the plus side, one of the highest profile hotspots is in the poll event
setup, which I think would be easy enough to squash down.

The functions for handling HTTP requests and responses are pretty primitive.
I had to trade functionality for finishing on time.

Making HTTP/1.1 pipelining and 100-Continue work was probably a waste of
time.

Future Updates
==============

Run it through a profiler more times and squash the high points.

Design a better API for writing HTTP API handlers.

Data Structures
===============

- class Sockets
  - vector of pollfd structs.

  Note: The following vectors are indexed by socket handle and resized to
  largest handle when a new Socket is added.
  - vector of Socket pointers

  - poll function
    This will call the poll system call, then handle updating each
    Socket.
  - add_socket function to insert a new Socket pointer.

class Socket
  - socket handle
    Doubles as index into Sockets vector.
  - struct sockaddr
    Filled in by accept().
  - timeout value
  - virtual functions
    - on_input
    - on_output
    - on_priority
    - on_error
    - on_hangup
    - on_invalid

class Listener : Socket
  - backlog count
  - pointer to Sockets

  - virtual override for on_input
    Inserts a new Connection into Sockets
    Will be overridden by HTTPListener to insert a new HTTPConnection.

- class Connection : Socket
  - input buffer
  - output buffer

  - virtual function overrides for on_input, on_output.
  - close function.

- class HTTPListener : Listener
  - override on_input to create and insert a HTTPConnection.

- class HTTPConnection : Connection
  - overrides on_input
    - checks for a complete request
  - checks for exceeding input size limit, closes Connection.
  - virtual functions for
    - on_get
    - on_post
    - on_delete.

- class DataStore
  - unordered_map<string, string>
    - The key is the path string.
  - The value is the headers and body.

  - set
  - get
  - del

- class AppConnection
  This implements the actual HTTP server application. It reacts to
  GET, POST and DELETE.

  - on_get
  - on_post
  - on_delete
